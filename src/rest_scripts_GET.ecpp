<#
 #
 # Copyright (C) 2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file rest_scripts_GET.ecpp
 * \author Jean-Baptiste Boric <Jean-BaptisteBORIC@Eaton.com>
 * \brief Implementation of GET operations on scripts
 */
 #><%pre>
#include <string>
#include <fstream>

#include <sys/types.h>
#include <dirent.h>
#include <unistd.h>

#include <fty_common_rest_helpers.h>
#include <cxxtools/jsonserializer.h>
#include <cxxtools/regex.h>

#include "helpers.h"

</%pre>
<%request scope="global">
UserInfo user;
//std::string gaccess_token;
</%request>
<%cpp>
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin, "R"}
    };

    CHECK_USER_PERMISSIONS_OR_DIE(PERMISSIONS);

    std::string name = qparam.param("name");
    if (name.empty()) {
        /**
         * Get a list of all scripts.
         */

        // Open directory.
        DIR *fdir = opendir(SCRIPT_DIRECTORY.c_str());
        if (!fdir) {
            http_die("internal-error", "Couldn't read directory");
        }

        cxxtools::SerializationInfo files;
        files.setCategory(cxxtools::SerializationInfo::Category::Array);
        cxxtools::Regex filename_regex(SCRIPT_FILENAME_REGEX, REG_EXTENDED | REG_ICASE);

        // List all files we're interested in.
        struct dirent *fdirent;
        while ((fdirent = readdir(fdir))) {
            if (filename_regex.match(fdirent->d_name)) {
                files.addMember("") <<= fdirent->d_name;
            }
        }
        closedir(fdir);

        // Serialize list.
        cxxtools::JsonSerializer serializer(reply.out());
        serializer.serialize(files).finish();
    }
    else {
        /**
         * Download a script.
         */

        // Check valid filename.
        std::string checked_name;
        check_regex_text_or_die("name", name, checked_name, SCRIPT_FILENAME_REGEX);

        // Read file into memory.
        std::ifstream fd(SCRIPT_DIRECTORY + checked_name, std::ifstream::binary);
        if (!fd) {
            http_die("not-found", checked_name.c_str());
        }
        fd.seekg(0, std::ios::end);
        std::streamsize size = fd.tellg();
        fd.seekg(0, std::ios::beg);

        if (size > SCRIPT_FILE_MAX_SIZE) {
            http_die("content-too-big", std::to_string(SCRIPT_FILE_MAX_SIZE).c_str());
        }

        char buffer[SCRIPT_FILE_MAX_SIZE];
        fd.read(buffer, size);

        if (!fd) {
            // Something went wrong.
            http_die("internal-error", "Error while reading file");
        }

        // Send file.
        reply.setHeader(tnt::httpheader::contentDisposition, "attachment; filename=\"" + checked_name + "\"");
        reply.setContentType("application/octet-stream");
        reply.out().write(buffer, size);
    }
</%cpp>