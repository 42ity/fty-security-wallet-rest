<#
 #
 # Copyright (C) 2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file rest_scripts_POST.ecpp
 * \author Jean-Baptiste Boric <Jean-BaptisteBORIC@Eaton.com>
 * \brief Implementation of POST operations on scripts
 */
 #><%pre>
#include <algorithm>
#include <string>
#include <fstream>

#include <sys/types.h>
#include <dirent.h>
#include <unistd.h>

#include <fty_common_rest_helpers.h>
#include <cxxtools/jsonserializer.h>
#include <cxxtools/regex.h>

#include "helpers.h"

</%pre>
<%request scope="global">
UserInfo user;
//std::string gaccess_token;
</%request>
<%cpp>
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin, "C"}
    };

    CHECK_USER_PERMISSIONS_OR_DIE(PERMISSIONS);

    // http://www.tntnet.org/howto/upload-howto.html
    const tnt::Multipart& mp = request.getMultipart();
    tnt::Multipart::const_iterator it = mp.find("assets");
    if (it == mp.end()) {
        http_die("request-param-required", "file=assets");
    }

    // Check if file name and size is acceptable.
    std::string checked_name;
    size_t filesize;
    check_regex_text_or_die("name", it->getFilename(), checked_name, SCRIPT_FILENAME_REGEX);
    filesize = std::distance(it->getBodyBegin(), it->getBodyEnd());
    if (filesize > SCRIPT_FILE_MAX_SIZE) {
        http_die("content-too-big", std::to_string(SCRIPT_FILE_MAX_SIZE).c_str());
    }

    // Open directory.
    DIR *fdir = opendir(SCRIPT_DIRECTORY.c_str());
    if (!fdir) {
        http_die("internal-error", "Couldn't read directory");
    }

    int nbfiles = 0;
    cxxtools::Regex filename_regex(SCRIPT_FILENAME_REGEX, REG_EXTENDED | REG_ICASE);
    bool known_script = false;

    // Check max number of scripts.
    struct dirent *fdirent;
    while ((fdirent = readdir(fdir))) {
        if (filename_regex.match(fdirent->d_name)) {
            if (streq(fdirent->d_name, checked_name.c_str())) {
                // We're going to replace an existing script.
                known_script = true;
                break;
            }
            nbfiles++;
        }
    }

    closedir(fdir);

    if (nbfiles >= SCRIPT_MAX_FILES && !known_script) {
        // Too many scripts.
        std::ostringstream msg;
        msg << "Max number of scripts reached (" << nbfiles << " in store, max " << SCRIPT_MAX_FILES << ")";
        http_die("precondition-failed", msg.str().c_str());
    }

    // Grab file data.
    char buffer[SCRIPT_FILE_MAX_SIZE];
    std::copy(it->getBodyBegin(), it->getBodyEnd(), buffer);

    // Write out file.
    std::ofstream fd(SCRIPT_DIRECTORY + checked_name, std::ifstream::binary);
    if (!fd) {
        http_die("internal-error", "Error while opening file");
    }
    fd.write(buffer, filesize);
    if (!fd) {
        http_die("internal-error", "Error while writing file");
    }
    chmod((SCRIPT_DIRECTORY + checked_name).c_str(), 0775);

    // Serialize output.
    cxxtools::SerializationInfo si;
    si.addValue("name", checked_name);
    cxxtools::JsonSerializer serializer(reply.out());
    serializer.serialize(si).finish();
</%cpp>